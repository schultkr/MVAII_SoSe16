# remove variables
rm(list = ls())
# reset graphics
graphics.off()
# Install packages if not installed
libraries = c("REdaS", "datasets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
# Load packages
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# === input parameters ===
# define paths and filenames
sPathRoot     = '/Users/christophschult/Gitlab/MVAII_SoSe16/MVA_pcastockselection_algorithm/MVA_pcastockselection_algorithm.R' # C:/" # for MAC "/Users/"
sReadDataFile = "Prices.dat"
sWriteResults = "Portfolios.dat"
# define auxiliary parameters for the data
sDateFormat = "%d.%m.%Y"
# define returns to compute
sTypeReturns = "grossreturn"
iStepSize    = 1
# define criteria for selection algorithm
iScaleCriteria = as.matrix(seq(0.01, 0.9, 0.05))
# eigenvalues smaller than <iSelectCriteria> are deleted and their respective eigenvectors
iSelectCriteria = 1
# minimum number of assets included after selection process
iminassets = 10
# which correlation method is used (default)
stypecor = "spearman"
# define sample size for random samples
iSampleSize = 1000
# define where the dates are stored in input file
iColDates = 1
# set working directory
setwd(sPathRoot)
# === definition of functions ===
# function to remove missing values from vector
complete = function(x) {
all(complete.cases(x))
}
# function to compute shares
compshares = function(price, weights, value = 1) {
shares   = as.matrix((value * weights)/price)
}
# function to find absolute maximum of vector
detectmax = function(x) {
which(abs(x) == max(abs(x)))
}
# compute returns for a vector
returnsfun = function(x) {
n = length(x)
switch(sTypeReturns, grossreturn = (x[(iStepSize + 1):n] - x[1:(n - iStepSize)])/x[1:(n - iStepSize)], logreturn = diff(log(x), iStepSize))
}
# define selection algorithm
selectalgofun = function(returnmatrix, scale, iminassets) {
iassetnum     = ncol(returnmatrix)
iStop         = sd(eigen(cor(returnmatrix))$values)
iStopCriteria = iStop * scale
lCont         = (iStop > iStopCriteria) & (iassetnum > iminassets)
while (lCont) {
eigenvalues = eigen(cor(returnmatrix, method = c(stypecor)))$values
eigenvectors = eigen(cor(returnmatrix, method = c(stypecor)))$vectors
iStop = sd(eigenvalues)
if (iStop > iStopCriteria) {
lreleigenvalues = eigenvalues < iSelectCriteria
iadelete        = unique(apply(eigenvectors[, lreleigenvalues], 2, detectmax))
iassetnum       = ncol(returnmatrix) - length(iadelete)
if (iassetnum > iminassets) {
returnmatrix = returnmatrix[, -iadelete]
}
}
lCont = (iStop > iStopCriteria) & (iassetnum > iminassets)
}
return(returnmatrix)
}
# define function to use different stop criteria
varystopcritfun = function(scalecriteria) {
datareduced    = selectalgofun(datareturns, scalecriteria, iminassets)
assetnames     = colnames(datareduced)
lassets        = colnames(datareturns) %in% assetnames
cormatrix      = cor(as.matrix(datareturns[, lassets]), method = c(stypecor))
lowercormatrix = cormatrix[lower.tri(cormatrix, diag = FALSE)]
maxcor         = max(lowercormatrix)
return(c(correlation = list(maxcor), assets = list(assetnames)))
}
# === find assets with pca selection criteria ===
# load price data
input         = read.table(sReadDataFile)
dataprices    = input[, -iColDates]
iadatesprices = input[, iColDates]
# compute equal weigthed portfolio of all stocks
startprices    = dataprices[1, ]
weightsvec     = rep(1/length(startprices))
sharesoriginal = compshares(startprices, weightsvec, 1)
valueoriginal  = as.matrix(dataprices) %*% t(sharesoriginal)
# create returns matrix
datareturns = apply(dataprices, 2, returnsfun)
lkeep       = apply(datareturns, 2, complete)
datareturns = datareturns[, lkeep]
dataprices  = dataprices[, lkeep]
# check Kaiser-Meyer-Olkin criterion
KMOScriteria = KMOS(datareturns, use = c("all.obs"))$KMO
if (KMOScriteria < 0.5) {
print("The period of interest might have not sufficient information to apply pca")
}
# apply selection algorithm to data
resultsalgorithm = apply(iScaleCriteria, 1, varystopcritfun)
# find optimal scale parameter w.r.t. the minimum maximum correlation across assets
iacorrelations = rapply(resultsalgorithm, function(x) x, classes = "numeric")
iaNbassets     = rapply(resultsalgorithm, function(x) length(x), classes = "character")
iaPosOpt       = which(iScaleCriteria == min(iScaleCriteria[iacorrelations == min(iacorrelations)]))
# plot iteration steps of the selection algorithm
x.labels   = as.numeric(iaNbassets)
x.tick.pos = x.labels
y.tick.pos = as.numeric(round(iacorrelations, 2))
y.labels   = y.tick.pos
plot(iaNbassets, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "number of assets",
ylab = "maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.tick.pos, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
# calculate equal weight portfoio of stocks selected by pca
assetsopt   = resultsalgorithm[[iaPosOpt]]$assets
lassetsopt  = colnames(dataprices) %in% assetsopt
startprices = dataprices[1, lassetsopt]
weightsvec  = rep(1/length(startprices))
sharespca   = compshares(startprices, weightsvec, 1)
valuepca    = as.matrix(dataprices[, lassetsopt]) %*% t(sharespca)
# collect portfolios for further analysis
output = list(Dates = iadatesprices, PFallassets = as.numeric(valueoriginal), PFoptassets = as.numeric(valuepca))
write.table(output, file = sWriteResults)
?text
text(x.tick.pos[1], y.tick.pos[1], "Step 1")
text(x.tick.pos[1], y.tick.pos[1], "Step 1", offset = 1)
text(x.tick.pos[1], y.tick.pos[1], "Step 1", offset = 4)
text(x.tick.pos[1], min(iacorrelations) - 1, "Step 1")
text(x.tick.pos[1], min(iacorrelations) - 0.1, "Step 1")
text(x.tick.pos[1], min(iacorrelations) - 0.9, "Step 1")
min(iacorrelations)
text(x.tick.pos[1], 0, "Step 1")
text(x.tick.pos[1], -1, "Step 1")
text(x.tick.pos[1] + 1, y.tick.pos[1] +1, "Step 1")
plot(iaNbassets, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "number of assets",
ylab = "maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.tick.pos, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
text(x.tick.pos[1] + 1, y.tick.pos[1] +1, "Step 1")
iterationsteps = 1:length(iacorrelations)
x.labels   = as.numeric(iaNbassets)
x.tick.pos = x.labels
y.tick.pos = as.numeric(round(iacorrelations, 2))
y.labels   = y.tick.pos
iterationsteps = rev(1:length(iacorrelations))
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "number of assets",
ylab = "maximum correlation", axes = FALSE)
iacorrelations
iterationsteps = rev(1:length(iacorrelations))
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
y.tick.pos = as.numeric(round(iacorrelations, 2))
y.labels   = y.tick.pos
iterationsteps = rev(1:length(iacorrelations))
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.tick.pos, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, lwd = 0.5, col.axis = "darkblue")
iterationsteps
iterationsteps = rev(1:length(iacorrelations))
x.labes        = iterationsteps
x.labes
y.tick.pos     = as.numeric(round(iacorrelations, 2))
y.tick.pos
y.labels
x.labels      = iterationsteps
x.tock.pos     = iterationsteps
par(mfrow = c(2, 1))
iterationsteps = rev(1:length(iacorrelations))
x.labels      = iterationsteps
x.tock.pos     = iterationsteps
y.tick.pos     = as.numeric(round(iacorrelations, 2))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, lebel = x.labels, lwd = 0.5, col.axis = "darkblue")
x.tick.pos
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
x.labels
iterationsteps = rev(1:length(iacorrelations))
x.labels      = rev(iterationstep)
x.tock.pos     = rev(iterationsteps)
y.tick.pos     = as.numeric(round(iacorrelations, 2))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.labels
x.labels
rev(iterationstep)
iterationsteps = rev(1:length(iacorrelations))
x.labels      = rev(iterationsteps)
x.tock.pos     = rev(iterationsteps)
y.tick.pos     = as.numeric(round(iacorrelations, 2))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
x.tick.pos
par(mfrow = c(2, 1))
iterationsteps = rev(1:length(iacorrelations))
x.labels      = rev(iterationsteps)
x.tick.pos     = rev(iterationsteps)
y.tick.pos     = as.numeric(round(iacorrelations, 2))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Iteration Steps of the Selection Algorithm",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iterationsteps, iaNbassets, main = "Number of Assets for each Iteration Step",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
iaNbassets
x.labels       = iScaleCriteria
x.tick.pos     = iScaleCriteria
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iterationsteps, iacorrelations, main = "Maximum Correlation for each Iteration Step",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
par(mfrow = c(2, 1))
x.labels       = iScaleCriteria
x.tick.pos     = iScaleCriteria
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for each Iteration Step",
type = "b", lwd = 3, col = "darkblue", xlab = "Iteration step",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
par(mfrow = c(2, 1))
x.labels       = iScaleCriteria
x.tick.pos     = iScaleCriteria
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iterationsteps, iaNbassets, main = "Number of Assets for Sacle Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iScaleCriteria, iaNbassets, main = "Number of Assets for Sacle Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iScaleCriteria, iaNbassets, main = "Number of Assets for Sacle Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Number of assets", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
iacorrelations
# plot results of selection algorithm depending on scale parameter
par(mfrow = c(2, 1))
x.labels       = iScaleCriteria
x.tick.pos     = iScaleCriteria
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iScaleCriteria, iaNbassets, main = "Number of Assets for Sacle Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Number of assets", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
KMOScriteria
if (KMOScriteria < 0.5) {
print("The period of interest might have not sufficient information to apply pca")
}
# plot results of selection algorithm depending on scale parameter
par(mfrow = c(2, 1))
# plot for maximum correlation
x.labels       = iScaleCriteria
x.tick.pos     = iScaleCriteria
y.tick.pos     = unique(as.numeric(round(iacorrelations, 2)))
y.labels       = y.tick.pos
plot(iScaleCriteria, iacorrelations, main = "Maximum Correlation for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Maximum correlation", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
# plot for number of assets
y.tick.pos     = iaNbassets
y.labels       = y.tick.pos
plot(iScaleCriteria, iaNbassets, main = "Number of Assets for Scale Parameters",
type = "b", lwd = 3, col = "darkblue", xlab = "Scale parameter",
ylab = "Number of assets", axes = FALSE)
axis(side = 2, at = y.tick.pos, label = y.labels, lwd = 0.5, col.axis = "darkblue")
axis(side = 1, at = x.tick.pos, label = x.labels, lwd = 0.5, col.axis = "darkblue")
